#include <iostream>
#include <vector>
#include <stack>
using namespace std;
void dfs(vector<vector<int>>& graph, int v, vector<bool>&
visited, int& count) {
visited[v] =
true;count++;
for (int u : graph[v]) {
if (!visited[u]) {
dfs(graph, u, visited, count);
}
}
}
int findMotherVertex(vector<vector<int>>& graph, int n) {
vector<bool> visited(n, false);
int motherVertex = -1;
for (int v = 0; v < n;
v++) {int count = 0;
if (!visited[v]) {
dfs(graph, v, visited, count);
if (count == n) {
motherVertex = v;
}
}
}
return motherVertex;
}
int main()
{int n;
cout << "Enter the number of vertices in the graph: ";
cin >> n;
vector<vector<int>> graph(n);
cout << "Enter the adjacency list for each vertex (enter -1 to
indicate the end of the list):" << endl;
for (int i = 0; i < n; i++) {
cout << "Vertex " << i << ":
";int u;
while (cin >> u && u != -
1) {
graph[i].push_back(u);
}
}
int motherVertex = findMotherVertex(graph, n);
if (motherVertex == -1) {
cout << "No mother vertex found" << endl;
} else {
cout << "Mother vertex: " << motherVertex << endl;
}
return 0; }
