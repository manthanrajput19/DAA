#include <iostream>
#include <vector>
#include
<algorithm>
using namespace std;
struct Item {
int weight;
int value;
};
void knapsack(int n, vector<int>& weights, vector<int>& values, int
capacity) {
vector<vector<int>> dp(n + 1, vector<int>(capacity + 1, 0));
for (int i = 1; i <= n; i++) {
for (int j = 1; j <= capacity; j++) {
- 1]);
if (weights[i - 1] <= j) {
dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weights[i - 1]] + values[i
} else {
dp[i][j] = dp[i - 1][j];
}
}
}
int maxValue = dp[n][capacity];
vector<Item> selectedItems;
int i = n, j = capacity;
while (i > 0 && j > 0) {
if (dp[i][j] != dp[i -
1][j]) {Item item;
item.weight = weights[i -
1];item.value = values[i -
1];
selectedItems.push_back(item);j
-= weights[i - 1];
i--;
} else
{i--;
}
}
reverse(selectedItems.begin(), selectedItems.end());
cout<<"OUTPUT\n";
cout << "Maximum value: " << maxValue << endl;
cout << "Selected items:" << endl;
for (const auto& item : selectedItems) {
cout << "Weight: " << item.weight << ", Value: " << item.value
<<endl;
}
}
int main() {
int n;
cout << "Enter the number of items: ";
cin >> n;
vector<int> weights(n);
vector<int> values(n);
cout << "Enter the weights of the items: ";
for (int i = 0; i < n; i++) {
cin >> weights[i];
}
