#include <iostream>
#include <vector>
#include
<algorithm>
using namespace std;
void activitySelection(int n, vector<int>& startTimes, vector<int>&
finishTimes) {
vector<pair<int, int>> activities(n);
for (int i = 0; i < n; i++) {
activities[i] = make_pair(startTimes[i], finishTimes[i]);
}
sort(activities.begin(), activities.end(), [](const pair<int, int>& a,
const pair<int, int>& b) {
return a.second < b.second;
});
vector<int> selectedActivities;
selectedActivities.push_back(0);
int count = 1;
int lastFinishTime = activities[0].second;
for (int i = 1; i < n; i++) {
if (activities[i].first >= lastFinishTime) {
selectedActivities.push_back(i);
count++;
lastFinishTime = activities[i].second;
}
}
cout << "Maximum number of non-conflicting activities: " << count
<< endl;
cout << "List of selected activities: ";
for (int i = 0; i < selectedActivities.size(); i++) {
cout << selectedActivities[i] << " ";
}
cout << endl;
}
int main() {
int n;
cout << "Enter the number of activities: ";
cin >> n;
vector<int> startTimes(n);
vector<int>
finishTimes(n);
cout << "Enter the starting times of activities: ";
for (int i = 0; i < n; i++) {
cin >> startTimes[i];
}
cout << "Enter the finishing times of activities: ";
for (int i = 0; i < n; i++) {
cin >> finishTimes[i];
}
activitySelection(n, startTimes, finishTimes);
return 0;
}
